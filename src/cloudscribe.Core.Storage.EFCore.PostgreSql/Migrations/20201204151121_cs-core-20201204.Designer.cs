// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cloudscribe.Core.Storage.EFCore.PostgreSql;

namespace cloudscribe.Core.Storage.EFCore.PostgreSql.Migrations
{
    [DbContext(typeof(CoreDbContext))]
    [Migration("20201204151121_cs-core-20201204")]
    partial class cscore20201204
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:PostgresExtension:uuid-ossp", ",,")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("cloudscribe.Core.Models.Geography.GeoCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ISOCode2")
                        .IsRequired()
                        .HasColumnName("iso_code2")
                        .HasColumnType("character varying(2)")
                        .HasMaxLength(2);

                    b.Property<string>("ISOCode3")
                        .IsRequired()
                        .HasColumnName("iso_code3")
                        .HasColumnType("character varying(3)")
                        .HasMaxLength(3);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_cs_geo_country");

                    b.HasIndex("ISOCode2")
                        .HasName("ix_cs_geo_country_iso_code2");

                    b.ToTable("cs_geo_country");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.Geography.GeoZone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnName("code")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("CountryId")
                        .HasColumnName("country_id")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.HasKey("Id")
                        .HasName("pk_cs_geo_zone");

                    b.HasIndex("Code")
                        .HasName("ix_cs_geo_zone_code");

                    b.HasIndex("CountryId")
                        .HasName("ix_cs_geo_zone_country_id");

                    b.ToTable("cs_geo_zone");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.SiteHost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("HostName")
                        .IsRequired()
                        .HasColumnName("host_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cs_site_host");

                    b.HasIndex("HostName")
                        .HasName("ix_cs_site_host_host_name");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_site_host_site_id");

                    b.ToTable("cs_site_host");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.SiteRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("NormalizedRoleName")
                        .IsRequired()
                        .HasColumnName("normalized_role_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cs_role");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasName("ix_cs_role_id");

                    b.HasIndex("NormalizedRoleName")
                        .HasName("ix_cs_role_normalized_role_name");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_role_site_id");

                    b.ToTable("cs_role");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.SiteSettings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("AccountApprovalEmailCsv")
                        .HasColumnName("account_approval_email_csv")
                        .HasColumnType("text");

                    b.Property<string>("AddThisDotComUsername")
                        .HasColumnName("add_this_dot_com_username")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("AliasId")
                        .HasColumnName("alias_id")
                        .HasColumnType("character varying(36)")
                        .HasMaxLength(36);

                    b.Property<bool>("AllowNewRegistration")
                        .HasColumnName("allow_new_registration")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowPersistentLogin")
                        .HasColumnName("allow_persistent_login")
                        .HasColumnType("boolean");

                    b.Property<bool>("AllowUserToChangeEmail")
                        .HasColumnName("allow_user_to_change_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("CaptchaOnLogin")
                        .HasColumnName("captcha_on_login")
                        .HasColumnType("boolean");

                    b.Property<bool>("CaptchaOnRegistration")
                        .HasColumnName("captcha_on_registration")
                        .HasColumnType("boolean");

                    b.Property<string>("CompanyCountry")
                        .HasColumnName("company_country")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("CompanyFax")
                        .HasColumnName("company_fax")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CompanyLocality")
                        .HasColumnName("company_locality")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CompanyName")
                        .HasColumnName("company_name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CompanyPhone")
                        .HasColumnName("company_phone")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CompanyPostalCode")
                        .HasColumnName("company_postal_code")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<string>("CompanyPublicEmail")
                        .HasColumnName("company_public_email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("CompanyRegion")
                        .HasColumnName("company_region")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<string>("CompanyStreetAddress")
                        .HasColumnName("company_street_address")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CompanyStreetAddress2")
                        .HasColumnName("company_street_address2")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("CompanyWebsite")
                        .HasColumnName("company_website")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnName("concurrency_stamp")
                        .HasColumnType("text");

                    b.Property<string>("CookiePolicySummary")
                        .HasColumnName("cookie_policy_summary")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnName("created_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DefaultEmailFromAddress")
                        .HasColumnName("default_email_from_address")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("DefaultEmailFromAlias")
                        .HasColumnName("default_email_from_alias")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("DisableDbAuth")
                        .HasColumnName("disable_db_auth")
                        .HasColumnType("boolean");

                    b.Property<string>("DkimDomain")
                        .HasColumnName("dkim_domain")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("DkimPrivateKey")
                        .HasColumnName("dkim_private_key")
                        .HasColumnType("text");

                    b.Property<string>("DkimPublicKey")
                        .HasColumnName("dkim_public_key")
                        .HasColumnType("text");

                    b.Property<string>("DkimSelector")
                        .HasColumnName("dkim_selector")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("EmailApiEndpoint")
                        .HasColumnName("email_api_endpoint")
                        .HasColumnType("text");

                    b.Property<string>("EmailApiKey")
                        .HasColumnName("email_api_key")
                        .HasColumnType("text");

                    b.Property<string>("EmailSenderName")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_sender_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100)
                        .HasDefaultValue("SmtpMailSender");

                    b.Property<string>("FacebookAppId")
                        .HasColumnName("facebook_app_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("FacebookAppSecret")
                        .HasColumnName("facebook_app_secret")
                        .HasColumnType("text");

                    b.Property<string>("FooterContent")
                        .HasColumnName("footer_content")
                        .HasColumnType("text");

                    b.Property<string>("ForcedCulture")
                        .HasColumnName("forced_culture")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ForcedUICulture")
                        .HasColumnName("forced_ui_culture")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("GoogleAnalyticsProfileId")
                        .HasColumnName("google_analytics_profile_id")
                        .HasColumnType("character varying(25)")
                        .HasMaxLength(25);

                    b.Property<string>("GoogleClientId")
                        .HasColumnName("google_client_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GoogleClientSecret")
                        .HasColumnName("google_client_secret")
                        .HasColumnType("text");

                    b.Property<string>("HeaderContent")
                        .HasColumnName("header_content")
                        .HasColumnType("text");

                    b.Property<bool>("IsDataProtected")
                        .HasColumnName("is_data_protected")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsServerAdminSite")
                        .HasColumnName("is_server_admin_site")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastModifiedUtc")
                        .HasColumnName("last_modified_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LdapDomain")
                        .HasColumnName("ldap_domain")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<int>("LdapPort")
                        .HasColumnName("ldap_port")
                        .HasColumnType("integer");

                    b.Property<string>("LdapRootDN")
                        .HasColumnName("ldap_root_dn")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("LdapServer")
                        .HasColumnName("ldap_server")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<bool>("LdapUseSsl")
                        .HasColumnName("ldap_use_ssl")
                        .HasColumnType("boolean");

                    b.Property<string>("LdapUserDNFormat")
                        .HasColumnName("ldap_user_dn_format")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LdapUserDNKey")
                        .HasColumnName("ldap_user_dn_key")
                        .HasColumnType("character varying(10)")
                        .HasMaxLength(10);

                    b.Property<string>("LoginInfoBottom")
                        .HasColumnName("login_info_bottom")
                        .HasColumnType("text");

                    b.Property<string>("LoginInfoTop")
                        .HasColumnName("login_info_top")
                        .HasColumnType("text");

                    b.Property<string>("LogoUrl")
                        .HasColumnName("logo_url")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<int>("MaxInvalidPasswordAttempts")
                        .HasColumnName("max_invalid_password_attempts")
                        .HasColumnType("integer");

                    b.Property<string>("MicrosoftClientId")
                        .HasColumnName("microsoft_client_id")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("MicrosoftClientSecret")
                        .HasColumnName("microsoft_client_secret")
                        .HasColumnType("text");

                    b.Property<int>("MinRequiredPasswordLength")
                        .HasColumnName("min_required_password_length")
                        .HasColumnType("integer");

                    b.Property<string>("OidConnectAppId")
                        .HasColumnName("oid_connect_app_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OidConnectAppSecret")
                        .HasColumnName("oid_connect_app_secret")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OidConnectAuthority")
                        .HasColumnName("oid_connect_authority")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("OidConnectDisplayName")
                        .HasColumnName("oid_connect_display_name")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<string>("OidConnectScopesCsv")
                        .HasColumnName("oid_connect_scopes_csv")
                        .HasColumnType("text");

                    b.Property<string>("PreferredHostName")
                        .HasColumnName("preferred_host_name")
                        .HasColumnType("character varying(250)")
                        .HasMaxLength(250);

                    b.Property<string>("PrivacyPolicy")
                        .HasColumnName("privacy_policy")
                        .HasColumnType("text");

                    b.Property<bool>("PwdRequireDigit")
                        .HasColumnName("pwd_require_digit")
                        .HasColumnType("boolean");

                    b.Property<bool>("PwdRequireLowercase")
                        .HasColumnName("pwd_require_lowercase")
                        .HasColumnType("boolean");

                    b.Property<bool>("PwdRequireNonAlpha")
                        .HasColumnName("pwd_require_non_alpha")
                        .HasColumnType("boolean");

                    b.Property<bool>("PwdRequireUppercase")
                        .HasColumnName("pwd_require_uppercase")
                        .HasColumnType("boolean");

                    b.Property<string>("RecaptchaPrivateKey")
                        .HasColumnName("recaptcha_private_key")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RecaptchaPublicKey")
                        .HasColumnName("recaptcha_public_key")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("RegistrationAgreement")
                        .HasColumnName("registration_agreement")
                        .HasColumnType("text");

                    b.Property<string>("RegistrationPreamble")
                        .HasColumnName("registration_preamble")
                        .HasColumnType("text");

                    b.Property<bool>("Require2FA")
                        .HasColumnName("require2_fa")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireApprovalBeforeLogin")
                        .HasColumnName("require_approval_before_login")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireConfirmedEmail")
                        .HasColumnName("require_confirmed_email")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireConfirmedPhone")
                        .HasColumnName("require_confirmed_phone")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequireCookieConsent")
                        .HasColumnName("require_cookie_consent")
                        .HasColumnType("boolean");

                    b.Property<bool>("RequiresQuestionAndAnswer")
                        .HasColumnName("requires_question_and_answer")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowSiteNameLink")
                        .HasColumnName("show_site_name_link")
                        .HasColumnType("boolean");

                    b.Property<bool>("SignEmailWithDkim")
                        .HasColumnName("sign_email_with_dkim")
                        .HasColumnType("boolean");

                    b.Property<bool>("SingleBrowserSessions")
                        .HasColumnName("single_browser_sessions")
                        .HasColumnType("boolean");

                    b.Property<string>("SiteFolderName")
                        .HasColumnName("site_folder_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("SiteIsClosed")
                        .HasColumnName("site_is_closed")
                        .HasColumnType("boolean");

                    b.Property<string>("SiteIsClosedMessage")
                        .HasColumnName("site_is_closed_message")
                        .HasColumnType("text");

                    b.Property<string>("SiteName")
                        .IsRequired()
                        .HasColumnName("site_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SmsClientId")
                        .HasColumnName("sms_client_id")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("SmsFrom")
                        .HasColumnName("sms_from")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SmsSecureToken")
                        .HasColumnName("sms_secure_token")
                        .HasColumnType("text");

                    b.Property<string>("SmtpPassword")
                        .HasColumnName("smtp_password")
                        .HasColumnType("text");

                    b.Property<int>("SmtpPort")
                        .HasColumnName("smtp_port")
                        .HasColumnType("integer");

                    b.Property<string>("SmtpPreferredEncoding")
                        .HasColumnName("smtp_preferred_encoding")
                        .HasColumnType("character varying(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("SmtpRequiresAuth")
                        .HasColumnName("smtp_requires_auth")
                        .HasColumnType("boolean");

                    b.Property<string>("SmtpServer")
                        .HasColumnName("smtp_server")
                        .HasColumnType("character varying(200)")
                        .HasMaxLength(200);

                    b.Property<bool>("SmtpUseSsl")
                        .HasColumnName("smtp_use_ssl")
                        .HasColumnType("boolean");

                    b.Property<string>("SmtpUser")
                        .HasColumnName("smtp_user")
                        .HasColumnType("character varying(500)")
                        .HasMaxLength(500);

                    b.Property<DateTime>("TermsUpdatedUtc")
                        .HasColumnName("terms_updated_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Theme")
                        .HasColumnName("theme")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TimeZoneId")
                        .HasColumnName("time_zone_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TwitterConsumerKey")
                        .HasColumnName("twitter_consumer_key")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("TwitterConsumerSecret")
                        .HasColumnName("twitter_consumer_secret")
                        .HasColumnType("text");

                    b.Property<bool>("UseEmailForLogin")
                        .HasColumnName("use_email_for_login")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseInvisibleRecaptcha")
                        .HasColumnName("use_invisible_recaptcha")
                        .HasColumnType("boolean");

                    b.HasKey("Id")
                        .HasName("pk_cs_site");

                    b.HasIndex("AliasId")
                        .HasName("ix_cs_site_alias_id");

                    b.HasIndex("SiteFolderName")
                        .HasName("ix_cs_site_site_folder_name");

                    b.ToTable("cs_site");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.SiteUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnName("access_failed_count")
                        .HasColumnType("integer");

                    b.Property<bool>("AccountApproved")
                        .HasColumnName("account_approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("AgreementAcceptedUtc")
                        .HasColumnName("agreement_accepted_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("AuthorBio")
                        .HasColumnName("author_bio")
                        .HasColumnType("text");

                    b.Property<string>("AvatarUrl")
                        .HasColumnName("avatar_url")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("BrowserKey")
                        .HasColumnName("browser_key")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("CanAutoLockout")
                        .HasColumnName("can_auto_lockout")
                        .HasColumnType("boolean");

                    b.Property<string>("Comment")
                        .HasColumnName("comment")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnName("created_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnName("date_of_birth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("DisplayInMemberList")
                        .HasColumnName("display_in_member_list")
                        .HasColumnType("boolean");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnName("display_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EmailConfirmSentUtc")
                        .HasColumnName("email_confirm_sent_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnName("first_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Gender")
                        .HasColumnName("gender")
                        .HasColumnType("text");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnName("is_locked_out")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginUtc")
                        .HasColumnName("last_login_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("LastModifiedUtc")
                        .HasColumnName("last_modified_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LastName")
                        .HasColumnName("last_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("LastPasswordChangeUtc")
                        .HasColumnName("last_password_change_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnName("lockout_end_date_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("MustChangePwd")
                        .HasColumnName("must_change_pwd")
                        .HasColumnType("boolean");

                    b.Property<string>("NewEmail")
                        .HasColumnName("new_email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<bool>("NewEmailApproved")
                        .HasColumnName("new_email_approved")
                        .HasColumnType("boolean");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnName("normalized_email")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasColumnName("normalized_user_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PasswordHash")
                        .HasColumnName("password_hash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnName("phone_number")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnName("phone_number_confirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("RolesChanged")
                        .HasColumnName("roles_changed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnName("security_stamp")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Signature")
                        .HasColumnName("signature")
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeZoneId")
                        .HasColumnName("time_zone_id")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnName("two_factor_enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("WebSiteUrl")
                        .HasColumnName("web_site_url")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("Id")
                        .HasName("pk_cs_user");

                    b.HasIndex("DisplayName")
                        .HasName("ix_cs_user_display_name");

                    b.HasIndex("NormalizedEmail")
                        .HasName("ix_cs_user_normalized_email");

                    b.HasIndex("NormalizedUserName")
                        .HasName("ix_cs_user_normalized_user_name");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_user_site_id");

                    b.ToTable("cs_user");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.UserClaim", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<string>("ClaimType")
                        .HasColumnName("claim_type")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("ClaimValue")
                        .HasColumnName("claim_value")
                        .HasColumnType("text");

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cs_user_claim");

                    b.HasIndex("ClaimType")
                        .HasName("ix_cs_user_claim_claim_type");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_user_claim_site_id");

                    b.HasIndex("UserId")
                        .HasName("ix_cs_user_claim_user_id");

                    b.ToTable("cs_user_claim");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.UserLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("id")
                        .HasColumnType("uuid");

                    b.Property<int>("CaptureCount")
                        .HasColumnName("capture_count")
                        .HasColumnType("integer");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Continent")
                        .HasColumnName("continent")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("Country")
                        .HasColumnName("country")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("FirstCaptureUtc")
                        .HasColumnName("first_capture_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("HostName")
                        .HasColumnName("host_name")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<string>("IpAddress")
                        .HasColumnName("ip_address")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<long>("IpAddressLong")
                        .HasColumnName("ip_address_long")
                        .HasColumnType("bigint");

                    b.Property<string>("Isp")
                        .HasColumnName("isp")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<DateTime>("LastCaptureUtc")
                        .HasColumnName("last_capture_utc")
                        .HasColumnType("timestamp without time zone");

                    b.Property<double>("Latitude")
                        .HasColumnName("latitude")
                        .HasColumnType("double precision");

                    b.Property<double>("Longitude")
                        .HasColumnName("longitude")
                        .HasColumnType("double precision");

                    b.Property<string>("Region")
                        .HasColumnName("region")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.Property<string>("TimeZone")
                        .HasColumnName("time_zone")
                        .HasColumnType("character varying(255)")
                        .HasMaxLength(255);

                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("Id")
                        .HasName("pk_cs_user_location");

                    b.HasIndex("IpAddress")
                        .HasName("ix_cs_user_location_ip_address");

                    b.HasIndex("UserId")
                        .HasName("ix_cs_user_location_user_id");

                    b.ToTable("cs_user_location");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.UserLogin", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnName("provider_key")
                        .HasColumnType("character varying(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnName("provider_display_name")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("UserId", "SiteId", "LoginProvider", "ProviderKey")
                        .HasName("pk_cs_user_login");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_user_login_site_id");

                    b.HasIndex("UserId")
                        .HasName("ix_cs_user_login_user_id");

                    b.ToTable("cs_user_login");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnName("role_id")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId")
                        .HasName("pk_cs_user_role");

                    b.HasIndex("RoleId")
                        .HasName("ix_cs_user_role_role_id");

                    b.HasIndex("UserId")
                        .HasName("ix_cs_user_role_user_id");

                    b.ToTable("cs_user_role");
                });

            modelBuilder.Entity("cloudscribe.Core.Models.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnName("user_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SiteId")
                        .HasColumnName("site_id")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("login_provider")
                        .HasColumnType("character varying(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Name")
                        .HasColumnName("name")
                        .HasColumnType("character varying(450)")
                        .HasMaxLength(450);

                    b.Property<string>("Value")
                        .HasColumnName("value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "SiteId", "LoginProvider", "Name")
                        .HasName("pk_cs_user_token");

                    b.HasIndex("SiteId")
                        .HasName("ix_cs_user_token_site_id");

                    b.HasIndex("UserId")
                        .HasName("ix_cs_user_token_user_id");

                    b.ToTable("cs_user_token");
                });
#pragma warning restore 612, 618
        }
    }
}
