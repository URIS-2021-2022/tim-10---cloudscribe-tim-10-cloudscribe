@model cloudscribe.Core.Web.ViewModels.Account.RegisterViewModel
@using cloudscribe.Core.Web
@using cloudscribe.Core.Web.Components
@using Microsoft.Extensions.Options
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Http.Authentication
@inject IStringLocalizer<CloudscribeCore> sr
@inject IOptions<UIOptions> uiOptionsAccessor
@{
    var socFormat = sr["Register using your {0} account"];
    var uiOptions = uiOptionsAccessor.Value;
}
@functions {
    public string GetIconForLogin(string displayName)
    {
        switch(displayName)
        {
            case "Facebook":
                return "<i class='fa fa-facebook-square' aria-hidden='true'></i>";
            case "Google":
                return "<i class='fa fa-google' aria-hidden='true'></i>";
            case "Twitter":
                return "<i class='fa fa-twitter' aria-hidden='true'></i>";
            case "Microsoft":
                return "<i class='fa fa-windows' aria-hidden='true'></i>";


        }

        return "<i class='fa fa-arrow-circle-right' aria-hidden='true'></i>";
    }
}
@section Meta {
    <meta name="robots" content="noindex" />
}
@section Styles {
    @{await Html.RenderPartialAsync("RegistrationStylePartial"); }
}
@if (Model.RecaptchaSiteKey.Length > 0)
{
    <script src='https://www.google.com/recaptcha/api.js'></script>
}
@if (Model.UseInvisibleCaptcha)
{
    <script>
        function onCaptchaSubmit(token) { document.getElementById("register-form").submit(); }
    </script>
}
<h2>@ViewData["Title"]</h2>
@if (Model.RegistrationPreamble.Length > 0)
{
    <div class="row">
        <div class="col-md-12">
            @Html.Raw(Model.RegistrationPreamble)
        </div>
    </div>
}
<form id="register-form" asp-controller="Account" asp-action="Register" method="post" class="form-horizontal" role="form">
    <input asp-for="UserId" type="hidden" />
    <h4>@sr["Create a new account."]</h4>
    <hr />
    <div asp-validation-summary="All" class="text-danger"></div>
    @if (!Model.UseEmailForLogin)
    {
        <div class="form-group">
            <label asp-for="Username" class="col-md-2 control-label">@sr["Username"]</label>
            <div class="col-md-10">
                <div class="input-group">
                    <span class="input-group-addon"><i class="@uiOptions.IconUsername" aria-hidden="true"></i></span>
                    <input asp-for="Username" class="form-control" />
                </div>
                <span asp-validation-for="Username" class="text-danger"></span>
                @Html.ValidationMessage("usernameerror", new { @class = "text-danger" })
            </div>
        </div>

    }
    <div class="form-group">
        <label asp-for="Email" class="col-md-2 control-label">@sr["Email"]</label>
        <div class="col-md-10">
            <div class="input-group">
                <span class="input-group-addon"><i class="@uiOptions.IconEmail" aria-hidden="true"></i></span>
                <input asp-for="Email" class="form-control" />
            </div>
            <span asp-validation-for="Email" class="text-danger"></span>
       </div>
    </div>
    @{await Html.RenderPartialAsync("RegisterMiddle", Model); }
    <div class="form-group">
        <label asp-for="Password" class="col-md-2 control-label">@sr["Password"]</label>
        <div class="col-md-10">
            <div class="input-group">
                <span class="input-group-addon"><i class="@uiOptions.IconPassword" aria-hidden="true"></i></span>
                <input asp-for="Password" class="form-control" />
            </div>
            <span asp-validation-for="Password" class="text-danger"></span>
        </div>
    </div>
    <div class="form-group">
        <label asp-for="ConfirmPassword" class="col-md-2 control-label">@sr["Confirm Password"]</label>
        <div class="col-md-10">
            <div class="input-group">
                <span class="input-group-addon"><i class="@uiOptions.IconPassword" aria-hidden="true"></i></span>
                <input asp-for="ConfirmPassword" class="form-control" />
            </div>
            <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
        </div>
    </div>
    @if (Model.RegistrationAgreement.Length > 0)
    {
        <div class="form-group">
            <div class="col-md-12 agreementcontainer">
                @Html.Raw(Model.RegistrationAgreement)
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="hidden" asp-for="AgreementRequired" />
                <div class="checkbox">
                    <input asp-for="AgreeToTerms" data-val-enforcetrue='@sr["You must agree to the terms."]' />
                    <label asp-for="AgreeToTerms">@sr["I Agree to these terms of use."]</label>
                    <span asp-validation-for="AgreeToTerms" class="text-danger"></span>
                    @Html.ValidationMessage("agreementerror", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    }
    else
    {
        <input name="AgreeToTerms" value="true" type="hidden" />
    }
@if (Model.RecaptchaSiteKey.Length > 0 && !Model.UseInvisibleCaptcha)
{
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <div class="g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey"></div>
            @Html.ValidationMessage("recaptchaerror", new { @class = "text-danger" })
        </div>
    </div>
}
    
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
@if (Model.RecaptchaSiteKey.Length > 0 && Model.UseInvisibleCaptcha)
{
    <button class="btn btn-default g-recaptcha" data-sitekey="@Model.RecaptchaSiteKey" data-callback='onCaptchaSubmit'>@sr["Register"]</button>
}
else
{
    <button name="submit" type="submit" class="btn btn-default">@sr["Register"]</button>
}    
            <input type="hidden" asp-for="UseEmailForLogin" />
        </div>
    </div>
</form>
@{
            var LoginProviders = Model.ExternalAuthenticationList.ToList();
            if (LoginProviders.Count > 0)
            {
        <section id="socialLoginForm">
            <h4>@sr["Use an existing account"]</h4>
            <hr />
            <form asp-controller="Account" asp-action="ExternalLogin" asp-route-returnurl='@ViewData["ReturnUrl"]' method="post" class="form-horizontal" role="form">
                <div id="socialLoginList">
                    <p>
                        @foreach (AuthenticationDescription p in LoginProviders)
                        {
                            <button type="submit" class="btn btn-default" id="@p.AuthenticationScheme" name="provider" value="@p.AuthenticationScheme"
                                    title="@string.Format(socFormat,p.DisplayName)">
                                @Html.Raw(GetIconForLogin(p.DisplayName)) @p.DisplayName
                            </button>
                        }
                    </p>
                </div>
            </form>
        </section>
    }
}
@section Scripts {
    @{await Html.RenderPartialAsync("RegistrationScriptsPartial"); }
}
