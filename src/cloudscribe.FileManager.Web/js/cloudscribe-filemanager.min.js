(function () {
    var fileManager = {
        headers: { 'X-CSRFToken': $("#fmconfig").data("anti-forgery-token") }, treeDataApiUrl: $("#fmconfig").data("filetree-url"), allowedFiles: $("#fmconfig").data("allowed-file-extensions"), uploadApiUrl: $("#fmconfig").data("upload-url"), downloadFileApiUrl: $("#fmconfig").data("file-download-url"), createFolderApiUrl: $("#fmconfig").data("create-folder-url"), deleteFolderApiUrl: $("#fmconfig").data("delete-folder-url"), renameFolderApiUrl: $("#fmconfig").data("rename-folder-url"), deleteFileApiUrl: $("#fmconfig").data("delete-file-url"), renameFileApiUrl: $("#fmconfig").data("rename-file-url"), canDelete: $("#fmconfig").data("can-delete"), canSelect: $("#fmconfig").data("can-select"), canDownload: $("#fmconfig").data("can-download"), emptyPreviewUrl: $("#fmconfig").data("empty-preview-url"), rootVirtualPath: $("#fmconfig").data("root-virtual-path"), rootButton: $('#btnRoot'), fileSelectorButton: $('#btnSelector'), fileSelectorButtonAlt: $('#btnSelectorAlt'), deleteFolderPromptButton: $('#btnDeleteFolderPrompt'), deleteFolderButton: $('#btnDeleteFolder'), renameFolderPromptButton: $('#btnRenameFolderPrompt'), renameFolderButton: $('#btnRenameFolder'), selectForCropButton: $('#btnSelectForCrop'), deleteFilePromptButton: $('#btnDeleteFilePrompt'), deleteFileButton: $('#btnDeleteFile'), renameFilePromptButton: $('#btnRenameFilePrompt'), renameFileButton: $('#btnRenameFile'), selectedFileInput: $("#fileSelection"), newFolderButton: $('#btnCreateFolder'), progressUI: $('#progress'), uploadTab: $('#tab2'), cropTab: $('#tab3'), treeData: [], selectedFileList: [], setCropImageFromServer: function () { var url = fileManager.selectedFileInput.val(); $("#image").attr("src", url); $("#cropCurrentDirLabel").html(url.substring(0, url.lastIndexOf("/"))); $("#cropCurrentDir").val(url.substring(0, url.lastIndexOf("/"))); var name = url.substring(url.lastIndexOf("/")); $("#croppedFileName").val(name); $('#origFileName').val(name); $('#lnkCrop').trigger('click') }, clearServerCropImage: function () { $("#image").attr("src", fileManager.emptyPreviewUrl); $("#croppedFileName").val(''); $('#origFileName').val('') }, setPreview: function (node) {
            fileManager.clearPreview(); switch (node.mediaType) { case "audio": $("#divAudioPreview").show(); $("#audio-source").attr("src", node.virtualPath); $("#audio-source").attr("type", node.mimeType); fileManager.audioPlayer = new Plyr('#audio-player', {}); break; case "video": $("#divVideoPreview").show(); $("#video-source").attr("src", node.virtualPath); $("#video-source").attr("type", node.mimeType); fileManager.videoPlayer = new Plyr('#video-player', {}); break; case "image": $("#divPreview").show(); $("#filePreview").attr("src", node.virtualPath); break }
            fileManager.uploadTab.hide(); fileManager.selectForCropButton.show(); var sizeWarning = document.getElementById("divFileSizeWarning"); sizeWarning.style.display = 'none'; $('#divFileSize').removeClass('alert-danger'); var sizeTest; if (Number.isInteger(node.size)) { var sizeInBytes = new Number(node.size); if (sizeInBytes > 1000000) { var sizeMb = sizeInBytes / 1000000; sizeTest = sizeMb + " MB"; $('#divFileSize').addClass('alert-danger'); if (node.mediaType == "image") { sizeWarning.style.display = 'block' } } else { var sizeKb = sizeInBytes / 1000; sizeTest = sizeKb + " KB" } }
            $('#divFileSize').text(sizeTest)
        }, clearPreview: function () {
            $("#filePreview").attr("src", fileManager.emptyPreviewUrl); $("#fileCropPreview").attr("src", fileManager.emptyPreviewUrl); $("#croppedFileName").val(''); fileManager.uploadTab.show(); fileManager.selectForCropButton.hide(); fileManager.clearServerCropImage(); if (fileManager.videoPlayer) { fileManager.videoPlayer.destroy() }
            if (fileManager.audioPlayer) { fileManager.audioPlayer.destroy() }
            $("#divVideoPreview").hide(); $("#video-source").attr("src", ""); $("#video-source").attr("type", ""); $("#divAudioPreview").hide(); $("#audio-source").attr("src", ""); $("#audio-source").attr("type", ""); $('#divFileSize').text(''); var sizeWarning = document.getElementById("divFileSizeWarning"); sizeWarning.style.display = 'none'
        }, setCurrentDirectory: function (virtualPath) { $("#newFolderCurrentDir").val(virtualPath); $("#hdnCurrentVirtualPath").val(virtualPath); $("#uploadCurrentDir").val(virtualPath); $("#cropCurrentDir").val(virtualPath); $("#cropCurrentDirLabel").html(virtualPath + "/"); $("#currentFolder").html(virtualPath); $("#folderToDelete").val(virtualPath); $("#folderToRename").val(virtualPath); fileManager.showFolderTools() }, clearCurrentDirectory: function () { $("#newFolderCurrentDir").val(fileManager.rootVirtualPath); $("#hdnCurrentVirtualPath").val(fileManager.rootVirtualPath); $("#uploadCurrentDir").val(fileManager.rootVirtualPath); $("#currentFolder").html(fileManager.rootVirtualPath); $("#folderToDelete").val(''); $("#folderToRename").val(''); fileManager.hideFolderTools() }, setCurrentFile: function (virtualPath, fileName) {
            fileManager.selectedFileInput.val(virtualPath); $("#newFolderCurrentDir").val(virtualPath.substring(0, virtualPath.lastIndexOf("/"))); $("#fileToRename").val(virtualPath); $("#fileToDelete").val(virtualPath); if (fileName) { $("#newFileNameSegment").val(fileName); if (fileManager.downloadFileApiUrl && fileManager.downloadFileApiUrl.length > 0) { $("#lnkDownloadFile").attr("href", fileManager.downloadFileApiUrl + "?fileToDownload=" + virtualPath) } }
            fileManager.showFileTools()
        }, clearCurrentFile: function () { fileManager.selectedFileInput.val(''); $("#fileToRename").val(''); $("#fileToDelete").val(''); $("#newFileNameSegment").val(''); fileManager.hideFileTools(); fileManager.clearPreview() }, backToRoot: function () { fileManager.clearCurrentFile(); fileManager.clearCurrentDirectory(); fileManager.clearPreview(); fileManager.setCurrentDirectory(fileManager.rootVirtualPath); fileManager.loadTree() }, showFolderTools: function () {
            if (fileManager.canDelete) { var currentFolder = $("#hdnCurrentVirtualPath").val(); if (currentFolder != fileManager.rootVirtualPath) { $('#frmDeleteFolder').show(); $("#frmRenameFolder").show() } }
            $('#frmNewFolder').show()
        }, hideFolderTools: function () { $('#frmDeleteFolder').hide(); $("#frmRenameFolder").hide(); $('#frmNewFolder').hide() }, showFileTools: function () { if (fileManager.canDelete) { $('#frmDeleteFile').show(); $("#frmRenameFile").show(); if (fileManager.downloadFileApiUrl) { $("#lnkDownloadFile").show() } } }, hideFileTools: function () { $('#frmDeleteFile').hide(); $("#frmRenameFile").hide(); $("#lnkDownloadFile").hide() }, notify: function (message, cssClass) { $('#alert_placeholder').html('<div class="alert ' + cssClass + '"><a class="close" data-dismiss="alert">Ã—</a><span>' + message + '</span></div>') }, addFileToList: function (data, fileList, index, file) { var d = $("<span class='far fa-trash-alt' aria-role='button' title='Remove'></span>").click(function () { data.files.splice(index, 1); fileList = data.files; $('#fileList li').eq(index).remove(); if (fileList.length === 0) { $('#fileList').html('') } }); var item = $("<li>", { text: file.name }).append("&nbsp;").append(d); $('#fileList ul').append(item) }, addErrorToList: function (index, file) { var item = $("<li>", { text: file.ErrorMessage }); $('#fileList ul').append(item) }, createFolder: function () {
            var formData = $('#frmNewFolder').serializeArray(); $.ajax({ method: "POST", url: fileManager.createFolderApiUrl, headers: fileManager.headers, data: formData }).done(function (data) {
                if (data.succeeded) {
                    var currentPath = $("#newFolderCurrentDir").val(); if (currentPath === fileManager.rootVirtualPath) { fileManager.loadTree() }
                    else { fileManager.reloadSubTree() }
                    $("#newFolderName").val('')
                }
                else { fileManager.notify(data.message, 'alert-danger') }
            }).fail(function () { fileManager.notify('An error occured', 'alert-danger') }); return !1
        }, deleteFolderPrompt: function () {
            var currentPath = $("#folderToDelete").val(); if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var message = "Are you sure you want to permanently delete the folder " + currentPath + " and any files or folders below it?"; $("#deleteFolderModalBody").html(message); $("#mdlDeleteFolder").modal('show'); return !1
        }, deleteFolder: function () {
            $("#mdlDeleteFolder").modal('hide'); var currentPath = $("#folderToDelete").val(); if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var formData = $('#frmDeleteFolder').serializeArray(); $.ajax({ method: "POST", url: fileManager.deleteFolderApiUrl, headers: fileManager.headers, data: formData }).done(function (data) {
                if (data.succeeded) { fileManager.removeNode(currentPath); fileManager.clearCurrentDirectory() }
                else { fileManager.notify(data.message, 'alert-danger') }
            }).fail(function () { fileManager.notify('An error occured', 'alert-danger') }); return !1
        }, renameFolderPrompt: function () {
            var currentPath = $("#folderToRename").val(); if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var message = "Are you sure you want to rename the folder " + currentPath + "?"; $("#renameFolderModalBody").html(message); $("#mdlRenameFolder").modal('show'); return !1
        }, renameFolder: function () {
            $("#mdlRenameFolder").modal('hide'); var currentPath = $("#folderToRename").val(); if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var formData = $('#frmRenameFolder').serializeArray(); $.ajax({ method: "POST", url: fileManager.renameFolderApiUrl, headers: fileManager.headers, data: formData }).done(function (data) {
                if (data.succeeded) {
                    var tree = $('#tree').treeview(!0); var matchingNodes = tree.findNodes(currentPath, 'id'); if (matchingNodes) {
                        var parents = tree.getParents(matchingNodes); if (parents && parents.length > 0) { fileManager.reloadSubTree(parents[0].id) }
                        else { fileManager.loadTree() }
                    }
                    $('#newNameSegment').val(''); fileManager.clearCurrentDirectory()
                }
                else { fileManager.notify(data.message, 'alert-danger') }
            }).fail(function () { fileManager.notify('An error occured', 'alert-danger') }); return !1
        }, deleteFilePrompt: function () {
            var currentPath = $("#fileToDelete").val(); if (currentPath === '') { return !1 }
            var message = "Are you sure you want to permanently delete the file " + currentPath + "?"; $("#deleteFileModalBody").html(message); $("#mdlDeleteFile").modal('show'); return !1
        }, deleteFile: function () {
            $("#mdlDeleteFile").modal('hide'); var currentPath = $("#fileToDelete").val(); if (currentPath === '') { return !1 }
            if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var formData = $('#frmDeleteFile').serializeArray(); $.ajax({ method: "POST", url: fileManager.deleteFileApiUrl, headers: fileManager.headers, data: formData }).done(function (data) {
                if (data.succeeded) { fileManager.removeNode(currentPath); fileManager.clearCurrentFile() }
                else { fileManager.notify(data.message, 'alert-danger') }
            }).fail(function () { fileManager.notify('An error occured', 'alert-danger') }); return !1
        }, renameFilePrompt: function () {
            var currentPath = $("#fileToRename").val(); if (currentPath === '') { return !1 }
            var message = "Are you sure you want to rename the file " + currentPath + "?"; $("#renameFileModalBody").html(message); $("#mdlRenameFile").modal('show'); return !1
        }, renameFile: function () {
            $("#mdlRenameFile").modal('hide'); var currentPath = $("#fileToRename").val(); if (currentPath === '') { return !1 }
            if (currentPath === fileManager.rootVirtualPath) { return !1 }
            var formData = $('#frmRenameFile').serializeArray(); $.ajax({ method: "POST", url: fileManager.renameFileApiUrl, headers: fileManager.headers, data: formData }).done(function (data) {
                if (data.succeeded) {
                    var tree = $('#tree').treeview(!0); var matchingNodes = tree.findNodes(currentPath, 'id'); if (matchingNodes) { var parents = tree.getParents(matchingNodes); if (parents && parents.length > 0) { fileManager.reloadSubTree(parents[0].id) } }
                    fileManager.clearCurrentFile()
                }
                else { fileManager.notify(data.message, 'alert-danger') }
            }).fail(function () { fileManager.notify('An error occured', 'alert-danger') }); return !1
        }, selectfile: function () {
            var funcNum = $("#fmconfig").data("ckfunc"); var fileUrl = fileManager.selectedFileInput.val(); if (fileUrl.length === 0) { fileManager.notify('Please select a file in the browse tab', 'alert-danger') }
            else {
                if (window.parent && window.parent.FileSelectCallback) { window.parent.FileSelectCallback(fileUrl) }
                else { window.opener.CKEDITOR.tools.callFunction(funcNum, fileUrl); window.close() }
            }
        }, removeNode: function (id) { var tree = $('#tree').treeview(!0); var matchingNodes = tree.findNodes(id, 'id'); tree.removeNode(matchingNodes, { silent: !0 }) }, reloadSubTree: function (folderIdToReload) {
            var tree = $('#tree').treeview(!0); var currentFolderId = folderIdToReload || $("#uploadCurrentDir").val(); if (currentFolderId.length === 0 || currentFolderId === fileManager.rootVirtualPath) { fileManager.loadTree(); return }
            var matchingNodes = tree.findNodes(currentFolderId, 'id'); if (matchingNodes.length > 0) {
                try { tree.collapseNode(matchingNodes, { silent: !0, ignoreChildren: !1 }) } catch (err) { }
                var theNode = matchingNodes[0]; var newNode = { text: theNode.text, id: theNode.id, type: theNode.type, icon: theNode.icon, expandedIcon: theNode.expandedIcon, virtualPath: theNode.virtualPath, nodes: [], lazyLoad: !0 }; try { tree.updateNode(theNode, newNode, { silent: !0 }); matchingNodes = tree.findNodes(currentFolderId, 'id'); tree.expandNode(matchingNodes, { silent: !0, ignoreChildren: !1 }) }
                catch (err) { }
            }
            else { alert('node not found') }
        }, loadTree: function () {
            $('#tree').treeview({
                dataUrl: { method: 'GET', dataType: 'json', url: fileManager.treeDataApiUrl, cache: !1 }, nodeIcon: 'far fa-folder mr-1', collapseIcon: 'fas fa-minus', emptyIcon: 'fa', expandIcon: 'fas fa-plus', loadingIcon: 'far fa-hourglass', levels: 2, onhoverColor: '#F5F5F5', highlightSelected: !0, showBorder: !0, showCheckbox: !1, showIcon: !0, wrapNodeText: !1, lazyLoad: function (node, dataFunc) { $.ajax({ dataType: "json", url: fileManager.treeDataApiUrl + '&virtualStartPath=' + node.virtualPath }).done(function (data) { dataFunc(data) }); node.lazyLoaded = !0 }, onNodeSelected: function (event, node) {
                    $("#divPreview").hide(); if (node.canPreview) { fileManager.setPreview(node) }
                    else { fileManager.clearPreview() }
                    if (node.type === "d") { fileManager.setCurrentDirectory(node.virtualPath); fileManager.clearCurrentFile(); fileManager.hideFileTools() }
                    else { fileManager.hideFolderTools(); fileManager.setCurrentFile(node.virtualPath, node.text) }
                }, onNodeUnselected: function (event, node) {
                    if (node.lazyLoaded) { node.lazyLoaded = !1 }
                    else { }
                    if (node.type === "d") { fileManager.hideFolderTools() }
                    else { fileManager.hideFileTools() }
                }
            })
        }, setupFileLoader: function () {
            $('#pnlFiles').fileupload({
                fileInput: $('#fileupload'), url: fileManager.uploadApiUrl, headers: fileManager.headers, dataType: 'json', autoUpload: !0, singleFileUploads: !0, dropZone: $('#dropZone'), pasteZone: $('#dropZone'), add: function (e, data) {
                    $('#fileList').empty(); $('#fileList').append($("<ul class='filelist'></ul>")); var allowedFiles = fileManager.allowedFiles.split('|'); var regx = new RegExp("([a-zA-Z0-9\u0600-\u06FF\s_\\.\-:])+(" + allowedFiles.join('|') + ")$"); var j = 0; var k = data.files.length; while (j < k) {
                        if ((regx.test(data.files[j].name.toLowerCase())) === !1) { fileManager.notify(data.files[j].name + ' not allowed', 'alert-danger'); data.files.splice(j, 1); k = data.files.length; j = -1 }
                        j++
                    }
                    fileManager.selectedFileList = fileManager.selectedFileList.concat(data.files); if (data.files.length > 0) { data.process().done(function () { data.submit() }) }
                }, done: function (e, data) {
                data.files = []; fileManager.selectedFileList = []; $('#fileupload').val(null); $('#progress').hide(); $('#fileList').empty(); fileListuploader = []; $('#fileList').append($("<ul class='filelist file-errors'></ul>")); var j = 0; var errorsOccurred = !1; while (j < data.length) {
                    if (data[j].errorMessage) { errorsOccurred = !0; addErrorToList(j, data[j]) }
                    j++
                }
                }, progressall: function (e, data) { var progress = parseInt(data.loaded / data.total * 100, 10); fileManager.progressUI.show(); $('#progress .progress-bar').css('width', progress + '%'); if (progress === 100) { fileManager.notify('File upload success.', 'alert-success'); setTimeout(function () { fileManager.reloadSubTree() }, 3000) } }, fail: function (e, data) { $('#progress .progress-bar').css('width', '0%'); fileManager.progressUI.hide(); fileManager.notify('Something went wrong, possibly the file is larger than allowed by server configuration.', 'alert-danger') }
            }).prop('disabled', !$.support.fileInput).parent().addClass($.support.fileInput ? undefined : 'disabled'); $('#fileupload').bind('fileuploadsubmit', function (e, data) { data.formData = $('#frmUpload').serializeArray(); return !0 })
        }, init: function () { $(document).bind('drop dragover', function (e) { e.preventDefault() }); this.progressUI.hide(); this.loadTree(); this.setupFileLoader(); this.newFolderButton.on('click', fileManager.createFolder); this.fileSelectorButton.on('click', fileManager.selectfile); this.fileSelectorButtonAlt.on('click', fileManager.selectfile); this.deleteFolderPromptButton.on('click', fileManager.deleteFolderPrompt); this.deleteFolderButton.on('click', fileManager.deleteFolder); this.renameFolderPromptButton.on('click', fileManager.renameFolderPrompt); this.renameFolderButton.on('click', fileManager.renameFolder); this.deleteFilePromptButton.on('click', fileManager.deleteFilePrompt); this.deleteFileButton.on('click', fileManager.deleteFile); this.renameFilePromptButton.on('click', fileManager.renameFilePrompt); this.renameFileButton.on('click', fileManager.renameFile); this.selectForCropButton.on('click', fileManager.setCropImageFromServer); this.setCurrentDirectory(this.rootVirtualPath); this.rootButton.on('click', fileManager.backToRoot); if (fileManager.canSelect === "false" || fileManager.canSelect === !1) { this.fileSelectorButton.hide(); this.fileSelectorButtonAlt.hide() } }
    }; fileManager.init(); var cropManager = {
        uploadUrl: $("#fmconfig").data("upload-url"), URL: window.URL || window.webkitURL, console: window.console || { log: function () { } }, image: $('#image'), saveLocalButton: $('#btnSaveLocal'), uploadCropButton: $('#btnUploadCrop'), croppedFileName: $('#croppedFileName'), chkConstrainCrop: $('#chkContrainWidthOfCrop'), cropMaxWidthInput: $('#cropMaxWidth'), dataX: $('#dataX'), dataY: $('#dataY'), dataHeight: $('#dataHeight'), dataWidth: $('#dataWidth'), dataRotate: $('#dataRotate'), dataScaleX: $('#dataScaleX'), dataScaleY: $('#dataScaleY'), outputHeight: $('#dataNewHeight'), outputWidth: $('#dataNewWidth'), setup: function () {
            var options = {
                aspectRatio: 16 / 9, preview: '.img-preview', crop: function (e) {
                    cropManager.dataX.val(Math.round(e.x)); cropManager.dataY.val(Math.round(e.y)); var height = Math.round(e.height); var width = Math.round(e.width); cropManager.dataHeight.val(height); cropManager.dataWidth.val(width); cropManager.dataRotate.val(e.rotate); cropManager.dataScaleX.val(e.scaleX); cropManager.dataScaleY.val(e.scaleY); var maxWidth = Math.round(cropManager.cropMaxWidthInput.val()); if (cropManager.chkConstrainCrop.is(':checked') && width > maxWidth) { cropManager.outputWidth.val(maxWidth); var aspect = cropManager.getCropAspectRatio(); var newHeight = parseInt(maxWidth / aspect); cropManager.outputHeight.val(newHeight); cropManager.setCroppedFileName(maxWidth, newHeight) }
                    else { cropManager.outputHeight.val(height); cropManager.outputWidth.val(width); cropManager.setCroppedFileName(Math.round(e.width), Math.round(e.height)) }
                    if ($.isFunction(document.createElement('canvas').getContext)) {
                        var currentSrc = cropManager.image.attr("src"); if (currentSrc === fileManager.emptyPreviewUrl) { cropManager.uploadCropButton.prop('disabled', !0) }
                        else { cropManager.uploadCropButton.prop('disabled', !1) }
                    }
                }
            }; var originalImageURL = cropManager.image.attr('src'); var uploadedImageURL; $('[data-toggle="tooltip"]').tooltip(); cropManager.image.on({ ready: function (e) { }, cropstart: function (e) { }, cropmove: function (e) { }, cropend: function (e) { }, crop: function (e) { }, zoom: function (e) { } }).cropper(options); if (!$.isFunction(document.createElement('canvas').getContext)) { cropManager.uploadCropButton.prop('disabled', !0) }
            if (typeof document.createElement('cropper').style.transition === 'undefined') { $('button[data-method="rotate"]').prop('disabled', !0); $('button[data-method="scale"]').prop('disabled', !0) }
            if (typeof cropManager.saveLocalButton[0].download === 'undefined') { cropManager.saveLocalButton.addClass('disabled') }
            $('.docs-toggles').on('change', 'input', function () {
                var $this = $(this); var name = $this.attr('name'); var type = $this.prop('type'); var cropBoxData; var canvasData; if (!cropManager.image.data('cropper')) { return }
                if (type === 'checkbox') { options[name] = $this.prop('checked'); cropBoxData = cropManager.image.cropper('getCropBoxData'); canvasData = cropManager.image.cropper('getCanvasData'); options.ready = function () { cropManager.image.cropper('setCropBoxData', cropBoxData); cropManager.image.cropper('setCanvasData', canvasData) } } else if (type === 'radio') { options[name] = $this.val() }
                cropManager.image.cropper('destroy').cropper(options)
            }); $("#btnUploadCropped").on('click', cropManager.uploadCroppedImage); cropManager.outputWidth.on('blur', function () {
                var aspect = cropManager.getCropAspectRatio(); var newWidth = parseInt(cropManager.outputWidth.val())
                var currentHeight = parseInt(cropManager.outputHeight.val()); var newHeight = parseInt(newWidth / aspect); var dif = Math.abs(newHeight - currentHeight); if (dif > 1) { cropManager.outputHeight.val(newHeight); cropManager.setCroppedFileName(newWidth, newHeight) }
            }); cropManager.outputHeight.on('blur', function () { var aspect = cropManager.getCropAspectRatio(); var newHeight = parseInt(cropManager.outputHeight.val()); var currentWidth = parseInt(cropManager.outputWidth.val()); var newWidth = parseInt(newHeight * aspect); var dif = Math.abs(newWidth - currentWidth); if (dif > 1) { cropManager.outputWidth.val(newWidth); cropManager.setCroppedFileName(newWidth, newHeight) } }); cropManager.chkConstrainCrop.change(function () {
                if ($(this).is(":checked")) { var maxWidth = Math.round(cropManager.cropMaxWidthInput.val()); var currentWidth = parseInt(cropManager.dataWidth.val()); if (currentWidth > maxWidth) { cropManager.outputWidth.val(maxWidth); var currentHeight = parseInt(cropManager.dataHeight.val()); var aspect = cropManager.getCropAspectRatio(); var newHeight = parseInt(maxWidth / aspect); cropManager.outputHeight.val(newHeight) } }
                else { cropManager.outputHeight.val(cropManager.dataHeight.val()); cropManager.outputWidth.val(cropManager.dataWidth.val()) }
            }); $('.docs-buttons').on('click', '[data-method]', function () {
                var $this = $(this); var data = $this.data(); var $target; var result; if ($this.prop('disabled') || $this.hasClass('disabled')) { return }
                if (cropManager.image.data('cropper') && data.method) {
                    data = $.extend({}, data); if (typeof data.target !== 'undefined') { $target = $(data.target); if (typeof data.option === 'undefined') { try { data.option = JSON.parse($target.val()) } catch (e) { console.log(e.message) } } }
                    if (data.method === 'rotate') { cropManager.image.cropper('clear') }
                    if ((typeof data.option === 'undefined') && (data.method === 'getCroppedCanvas')) { data.option = { width: cropManager.outputWidth.val(), height: cropManager.outputHeight.val() } }
                    result = cropManager.image.cropper(data.method, data.option, data.secondOption); if (data.method === 'rotate') { cropManager.image.cropper('crop') }
                    switch (data.method) {
                        case 'scaleX': case 'scaleY': $(this).data('option', -data.option); break; case 'getCroppedCanvas': if (result) { $('#getCroppedCanvasModal').modal().find('.modal-body').html(result); if (!cropManager.saveLocalButton.hasClass('disabled')) { cropManager.saveLocalButton.attr('href', result.toDataURL('image/jpeg')) } }
                            break; case 'destroy': if (uploadedImageURL) { URL.revokeObjectURL(uploadedImageURL); uploadedImageURL = ''; cropManager.image.attr('src', originalImageURL) }
                            break
                    }
                    if ($.isPlainObject(result) && $target) { try { $target.val(JSON.stringify(result)) } catch (e) { console.log(e.message) } }
                }
            }); $(document.body).on('keydown', function (e) {
                if (!cropManager.image.data('cropper') || this.scrollTop > 300) { return }
                switch (e.which) { case 37: e.preventDefault(); cropManager.image.cropper('move', -1, 0); break; case 38: e.preventDefault(); cropManager.image.cropper('move', 0, -1); break; case 39: e.preventDefault(); cropManager.image.cropper('move', 1, 0); break; case 40: e.preventDefault(); cropManager.image.cropper('move', 0, 1); break }
            }); var $inputImage = $('#inputImage'); if (cropManager.URL) {
                $inputImage.change(function () {
                    var files = this.files; var file; if (!cropManager.image.data('cropper')) { return }
                    if (files && files.length) {
                        file = files[0]; if (/^image\/\w+$/.test(file.type)) {
                            if (uploadedImageURL) { URL.revokeObjectURL(uploadedImageURL) }
                            uploadedImageURL = cropManager.URL.createObjectURL(file); $('#origFileName').val(file.name.toLowerCase()); cropManager.croppedFileName.val(file.name.toLowerCase()); cropManager.image.cropper('destroy').attr('src', uploadedImageURL).cropper(options); $inputImage.val('')
                        } else { window.alert('Please choose an image file.') }
                    }
                })
            } else { $inputImage.prop('disabled', !0).parent().addClass('disabled') }
        }, tearDown: function () { if (($('#image').data('cropper'))) { $('#image').cropper('destroy') } }, setCroppedFileName: function (width, height) { var origName = $('#origFileName').val(); var nameWithoutExtension = origName.substring(0, origName.lastIndexOf('.')); var ext = origName.substring(origName.lastIndexOf('.')); cropManager.croppedFileName.val(nameWithoutExtension + "-" + width + "x" + height + ext); cropManager.saveLocalButton.attr("download", cropManager.croppedFileName.val()) }, getCropAspectRatio: function () { var cropbox = $('#image').cropper('getCropBoxData'); return cropbox.width / cropbox.height }, uploadCroppedImage: function () {
            var opts = { width: cropManager.outputWidth.val(), height: cropManager.outputHeight.val() }; $('#image').cropper('getCroppedCanvas', opts).toBlob(function (blob) {
                var formData = new FormData(); formData.append(cropManager.croppedFileName.val(), blob); var otherData = $('#frmUploadCropped').serializeArray(); $.each(otherData, function (key, input) { formData.append(input.name, input.value) })
                $.ajax({ method: "POST", url: fileManager.uploadApiUrl, headers: fileManager.headers, data: formData, processData: !1, contentType: !1 }).done(function (data, textStatus, jqXHR) {
                    if (data[0].errorMessage) { fileManager.notify(data[0].errorMessage, 'alert-danger') }
                    else {
                        var currentPath = $("#cropCurrentDir").val(); if (currentPath === fileManager.rootVirtualPath) { fileManager.loadTree() }
                        else { fileManager.reloadSubTree(currentPath) }
                        $('#getCroppedCanvasModal').modal('hide'); fileManager.notify('Cropped image upload succeeded', 'alert-success')
                    }
                }).fail(function (jqXHR, textStatus, errorThrown) { fileManager.notify(errorThrown, 'alert-danger') })
            }); return !1
        }
    }; $('a[data-toggle="tab"]').on('shown.bs.tab', function (e) {
        var target = $(e.target).attr("href"); if (target === "#tabCrop") { cropManager.setup() }
        else { var related = $(e.relatedTarget).attr("href"); if (related) { var hash = related.replace(/^.*?(#|$)/, ''); if (hash === "tabCrop") { cropManager.tearDown() } } }
    })
})()